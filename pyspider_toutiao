#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# Created on 2018-03-05 17:49:01
# Project: toutiao

from pyspider.libs.base_handler import *
import pymongo
import time
import math
import hashlib
import requests
import random


MONGO_host = '127.0.0.1'
MONGO_port = 27017
MONGO_db = 'toutiao'


class MongoDB(object):
    
    def __init__(self):
        self.client = pymongo.MongoClient(MONGO_host,MONGO_port)
        self.news = self.client[MONGO_db]['pyspider_news']
    
    def find_data(self, data):
        self.news.find_one({'group_id': data})

class Handler(BaseHandler):
    crawl_config = {
        'itag': 'v001'
    }
    
    def __init__(self):
        super(Handler, self).__init__()
        self.db = MongoDB()
        self.root_url = 'https://www.toutiao.com/api/pc/feed/'
        self.host = 'https://www.toutiao.com'
        self.headers = {
            'Host': 'www.toutiao.com',
            'Referer': 'https://www.toutiao.com/',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36'

        }
        self.UA = ['Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36',
      'Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50',
      'Mozilla/5.0(WindowsNT6.1;rv:2.0.1)Gecko/20100101Firefox/4.0.1',
      'Opera/9.80(WindowsNT6.1;U;en)Presto/2.8.131Version/11.11',
      'Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Maxthon2.0)',
      'Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;TencentTraveler4.0)',
      'Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;Trident/4.0;SE2.XMetaSr1.0;SE2.XMetaSr1.0;.NETCLR2.0.50727;SE2.XMetaSr1.0)',
      'Mozilla/4.0(compatible;MSIE7.0;WindowsNT5.1;360SE)',
      ]
        self.cookies = {
            'tt_webid': '6529359275058841091'
        }
        self.params = {
            'category': '__all__',
            'utm_source': 'toutiao',
            'widen': 1,
            'max_behot_time': 0,
            'max_behot_time_tmp': 0,
            'tadrequire': 'true',
            'as': '',
            'cp': '',
            '_signature': 'kbLXQgAAyznN3niq4d1q3JGy11'
            
        }

    @every(minutes=24 * 60)
    def on_start(self):
        AS, CP = self.getASCP()
        self.headers['user-agent'] = random.choice(self.UA)
        self.cookies['tt_webid'] = self.get_cookies()
        self.params['as'] = AS
        self.params['cp'] = CP
        self.params['max_behot_time'] = 0
        self.params['max_behot_time_tmp'] = 0
        self.crawl(self.root_url, params=self.params, headers=self.headers, cookies=self.cookies, callback=self.index_page)

    def index_page(self, response):
        AS, CP = self.getASCP()
        self.params['as'] = AS
        self.params['cp'] = CP
        self.headers['user-agent'] = random.choice(self.UA)
        if response.json and response.json['message']=='success':
            next_max_behot_time = response.json['next']['max_behot_time']
            self.params['max_behot_time'] = next_max_behot_time
            self.params['max_behot_time_tmp'] = next_max_behot_time
            self.crawl(self.root_url, params=self.params, headers=self.headers, cookies=self.cookies, callback=self.index_page)
            return response.json['data']
        else:
            self.cookies['tt_webid'] = self.get_cookies()
            self.crawl(self.root_url, params=self.params, headers=self.headers, cookies=self.cookies, callback=self.index_page)
        

    def on_result(self, result):
        if not result:
            return
        for i in result:
            find = self.db.news.find_one({'group_id': i['group_id']})
            if find:
                find['repeat_count'] = str(int(find['repeat_count'])+1)
                self.db.news.update({'group_id': find['group_id']},{'$set':find})
            else:
                i['repeat_count'] = '0'
                self.db.news.insert(i)
        
    def get_cookies(self):
        r = requests.get('https://www.toutiao.com', headers=self.headers)
        return r.cookies.values()[0]
    
    def getASCP(self):
        t = int(math.floor(time.time()))
        e = hex(t).upper()[2:]
        m = hashlib.md5()
        m.update(str(t).encode(encoding='utf-8'))
        i = m.hexdigest().upper()

        if len(e) != 8:
            AS = '479BB4B7254C150'
            CP = '7E0AC8874BB0985'
            return AS,CP

        n = i[0:5]
        a = i[-5:]
        s = ''
        r = ''
        for o in range(5):
            s += n[o] + e[o]
            r += e[o + 3] + a[o]

        AS = 'A1' + s + e[-3:]
        CP = e[0:3] + r + 'E1'
        return AS,CP
